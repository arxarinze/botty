#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('bot-service:server');
const http = require('http');
const WebSocketServer = require('ws').Server;
const onConnectionHandle = require('../src/handles/connection');
const onErrorHandle = require('../src/handles/error');
const onCloseHandle = require('../src/handles/close');
const Datasource = require('../src/storage/store');
/**
 * Get port from environment and store in Express.
 */

//const port = normalizePort(process.env.PORT || '4000');
//app.set('port', port);

/**
 * Create HTTP server.
 */
const port = process.env.PORT
const server = http.createServer(app);


/**
 * Connect To Database
 */
new Datasource().connect();
/**
 * Listen on provided port, on all network interfaces.
 * Listen on a socket through a port on all interfaces
 */
// app.use((error, req, res, next) => {
//   if (!error.statusCode) {
//     res.status(500).send({
//       status: 500,
//       message: "Error Occured"
//     })
//   }
//   else {
//     res.status(error.statusCode).send({
//       status: error.statusCode,
//       message: "Error Occured"
//     })
//   }
// })
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
const wsServer = new WebSocketServer({ port: process.env.WSPORT, server }) //websocket init
wsServer.on('connection', onConnectionHandle)//handles the connection
/**
 * Normalize a port into a number, string, or false.
 */

// /**
//  * Event listener for HTTP server "error" event.
//  */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
